# php error logs
# has some overlap with deskpro app logs -- many PHP errors get caught and logged to app logs
[sources.php_error_raw]
type = "file"
include = ["/var/log/php/error.log", "/var/log/php/error.log.1"]
ignore_not_found = true
max_line_bytes = 2000000
  [sources.php_error_raw.multiline]
  start_pattern = '^\[\d+\-\w+\-\d+ \d+:\d+:\d+ .*?\] '
  mode = "halt_before"
  condition_pattern = '^\[\d+\-\w+\-\d+ \d+:\d+:\d+ .*?\] '
  timeout_ms = 1000

[transforms.php_error]
type = "remap"
inputs = ["php_error_raw"]
source = '''
if is_string(.message) && contains(string!(.message), get_env_var!("VECTOR_MARKER")) {
  abort
}

.log_group = "php-error"
.lvl = "ERROR"
.app = "php"
.chan = "error"

.parsed = parse_regex(.message, r'(?m)^\[(?P<ts>\d+\-\w+\-\d+ \d+:\d+:\d+).*?\] (?P<msg>(.|\n)*)$') ?? {}

if !is_nullish(.parsed.ts) {
  .ts = parse_timestamp(.parsed.ts, "%d-%b-%Y %H:%M:%S") ?? null
}

if !is_nullish(.parsed.msg) {
  msg = string(.parsed.msg) ?? ""
  if (contains(msg, "PHP Deprecated:") || contains(msg, "PHP Notice:")) {
    .lvl = "NOTICE"
  } else if contains(msg, "PHP Warning:") {
    .lvl = "WARNING"
  }
}
'''

# php_fpm errors will be things like max children being exceeded
[sources.php_fpm_error_raw]
type = "file"
include = ["/var/log/php/fpm_error.log", "/var/log/php/fpm_error.log.1"]
ignore_not_found = true

[transforms.php_fpm_error]
type = "remap"
inputs = ["php_fpm_error_raw"]
source = '''
.log_group = "php_fpm-error"
.app = "php_fpm"
.chan = "error"
.parsed = parse_regex(.message, r'^(?P<ts>\[\d+\-\w+\-\d+ \d+:\d+:\d+\]) (?P<lvl>\w+): (?P<msg>.*)$') ?? {}
'''

# php fpm slow logs
[sources.php_fpm_slow_raw]
type = "file"
include = ["/var/log/php/fpm_slow.log", "/var/log/php/fpm_slow.log.1"]
ignore_not_found = true
max_line_bytes = 2000000
  [sources.php_fpm_slow_raw.multiline]
  start_pattern = '^\[\d+\-\w+\-\d+ \d+:\d+:\d+[^]]*\] '
  mode = "halt_before"
  condition_pattern = '^\[\d+\-\w+\-\d+ \d+:\d+:\d+[^]]*\] '
  timeout_ms = 1000

[transforms.php_fpm_slow]
type = "remap"
inputs = ["php_fpm_slow_raw"]
source = '''
.log_group = "php_fpm-slow"
.lvl = "WARNING"
.app = "php_fpm"
.chan = "error"

.parsed = parse_regex(.message, r'(?m)^\[(?P<ts>\d+\-\w+\-\d+ \d+:\d+:\d+)[^]]*\]\s+\[pool (?P<pool>[^]]+)\] pid (?P<pid>\d+)\n(?P<msg>(.|\n)*)$') ?? {}

if !is_nullish(.parsed.ts) {
  .ts = parse_timestamp(.parsed.ts, "%d-%b-%Y %H:%M:%S") ?? null
}
'''

{{ if conv.ToBool (getenv "METRICS_ENABLED" "false") }}
{{ if conv.ToBool (getenv "METRICS_PHP_FPM_ENABLED" "true") }}
[sources.php_fpm_metrics_source]
type = "prometheus_scrape"
endpoints = [
  "http://localhost:10001/fpm/dp_default/status?openmetrics",
  "http://localhost:10001/fpm/dp_broadcaster/status?openmetrics",
  "http://localhost:10001/fpm/dp_gql/status?openmetrics",
  "http://localhost:10001/fpm/dp_internal/status?openmetrics",
]
endpoint_tag = "endpoint"
scrape_interval_secs = 60

[transforms.php_fpm_metrics]
type = "remap"
inputs = ["php_fpm_metrics_source"]
source = '''
parsed = parse_regex!(.tags.endpoint, r'/fpm/(?P<pool>[^/]+)/status')

.tags.pool = parsed.pool

del(.tags.endpoint)
'''
{{ end }}
{{ end }}
