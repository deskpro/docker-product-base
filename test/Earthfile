VERSION 0.7
FROM scratch

# save-base-image saves the test image (that have all the test sources)
# as deskpro/docker-product-base:test. Useful if you want to run the
# image manually for some reason.
#
# Example usage:
#  earthly +save-base-image
#  docker run --rm -it deskpro/docker-product-base:test bash
save-base-image:
    FROM +base-image
    SAVE IMAGE deskpro/docker-product-base:test

# test runs all tests
test:
    BUILD +test-serverspec-web
    BUILD +test-serverspec-opc
    BUILD +test-serverspec-simple-cases
    BUILD +test-custom-configs
    BUILD +test-custom-logs-group
    BUILD +test-autoinstall
    BUILD +test-automigrations

# test-serverspec-web runs serverspec tests against the base image in web mode
# with no customization options enabled. That is, these specs apply against
# a pristine environment when not even basic conifg has been provided.
test-serverspec-web:
    FROM earthly/dind:alpine
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN docker run -d --name test deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/always spec/default_web' \
            && docker stop test \
            && docker start test \
            && echo "Run again to verify state after rebooting" \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/always spec/default_web'
    END

# test-serverspec-opc runs opc specific tests
# TODO - currently just runs same as +test-serverspec-web but in opc mode
test-serverspec-opc:
    FROM earthly/dind:alpine
    COPY --dir serverspec/spec/scenarios/bc_opc_2_8/deskpro_dir /tmp/deskpro_dir
    COPY --dir serverspec/spec/scenarios/bc_opc_2_8/test_helper_tools /tmp/test_helper_tools
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN docker run -d --name test \
            -e OPC_VERSION=2.8.0 \
            -v /tmp/deskpro_dir:/deskpro \
            -v /tmp/test_helper_tools:/test_helper_tools \
            deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/bc_opc_2_8/01_opc_bc.rb' \
            && docker stop test \
            && docker start test \
            && echo "Run again to verify state after rebooting" \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/always spec/default_web spec/scenarios/bc_opc_2_8/01_opc_bc.rb'
    END

# test-serverspec-simplecases runs serverspec tests against the base image in web mode
# to test 'simple' test cases. These are cases that don't require any special setup.
test-serverspec-simple-cases:
    FROM earthly/dind:alpine
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN docker run -d --name test deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/cases/simple'
    END

# test-autoinstall checks the behaviour of AUTO_RUN_INSTALLER=true to ensure
# the installer runs when it should, and that it doesn't run when it shouldn't.
test-autoinstall:
    FROM earthly/dind:alpine
    # this test relies on simulating the installer based on a sentinel file
    # that is cleared after the instsalation has run.
    RUN mkdir /tmp/sim && touch /tmp/sim/needs-installer
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN \
            # first run - simulate that the installer needs to run
            docker run -d --name test \
                -e AUTO_RUN_INSTALLER=true \
                -v /tmp/sim:/run/sim \
                deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/autoinstall/01_installer_spec.rb' \
            && docker stop test \
            # second run - verify that the installer doesn't run again
            && docker start test \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/autoinstall/02_post_installer_spec.rb'
    END

# test-automigrations checks the behaviour of AUTO_RUN_MIGRATIONS=true to ensure
# the installer runs when it should.
test-automigrations:
    FROM earthly/dind:alpine
    # this test relies on simulating the installer based on a sentinel file
    # that is cleared after the instsalation has run.
    RUN mkdir /tmp/sim && touch /tmp/sim/needs-migrations
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN \
            # first run - simulate that the migrations need to run
            docker run -d --name test \
                -e AUTO_RUN_MIGRATIONS=true \
                -v /tmp/sim:/run/sim \
                deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/automigrations/01_migrations_spec.rb' \
            && docker stop test \
            # second run - verify that migrations doesn't run again
            && docker start test \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/automigrations/02_post_migrations_spec.rb'
    END

# test-custom-configs checks the behaviour of mounting custom config files via /deskpro/config/ dirs.
test-custom-configs:
    FROM earthly/dind:alpine
    COPY --dir serverspec/spec/scenarios/custom_configs/deskpro_dir /tmp/deskpro-dir
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN \
            # first run - simulate that the migrations need to run
            docker run -d --name test \
                -v /tmp/deskpro-dir:/deskpro \
                deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/custom_configs/01_custom_configs_spec.rb' \
            && docker stop test \
            && rm /tmp/deskpro-dir/config/php.d/* \
            && docker start test \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/custom_configs/02_custom_configs_removed_spec.rb'
    END

test-custom-logs-group:
    FROM earthly/dind:alpine
    RUN addgroup --gid 1988 logs_group \
        && mkdir /tmp/deskpro-logs \
        && chown root:logs_group /tmp/deskpro-logs \
        && chmod 0775 /tmp/deskpro-logs
    WITH DOCKER --load deskpro/docker-product-base:test=+base-image
        RUN \
            # first run - simulate that the migrations need to run
            docker run -d --name test \
                -e CONTAINER_NAME=logtest \
                -e LOGS_GID=1988 \
                -v /tmp/deskpro-logs:/deskpro/logs \
                deskpro/docker-product-base:test web \
            && docker exec test /bin/sh -c 'cd /test/serverspec && rspec spec/scenarios/custom_log_group/01_custom_log_group_spec.rb' \
            && docker exec test /usr/bin/php -r 'echo $doesNotExist;' \
            && docker stop test
    END
    RUN echo "/tmp/deskpro-logs/logtest should be owned by logs_group" && stat /tmp/deskpro-logs/logtest | grep 1988
    RUN echo "/tmp/deskpro-logs/logtest/php/error.log should be owned by logs_group" && stat /tmp/deskpro-logs/logtest/php/error.log  | grep 1988

# Built on top of the product base image, this just adds test sources
# and simulation sources used when testing various container features.
base-image:
    FROM ../+docker-product-base
    RUN DEBIAN_FRONTEND=noninteractive apt-get install -y ruby && gem install bundler serverspec rake
    ENV BOOT_LOG_LEVEL=TRACE
    ENV BOOT_LOG_LEVEL_EXEC=TRACE
    ENV HTTP_USE_TESTING_CERTIFICATE=true
    COPY --dir serverspec /test/serverspec
    COPY --dir simulate-release/* /srv/deskpro
    RUN \
        echo "true" > /run/is-container-test \
        && cd /test/serverspec \
        && bundler install
